var cov_1h8owsa8m6=function(){var path="/app/clients/node/lib/recurly/Caster.js";var hash="3d1b3251d5ca37c203961c34de513bbc45d20b6e";var global=new Function("return this")();var gcv="__coverage__";var coverageData={path:"/app/clients/node/lib/recurly/Caster.js",statementMap:{"0":{start:{line:1,column:14},end:{line:1,column:32}},"1":{start:{line:2,column:15},end:{line:2,column:42}},"2":{start:{line:15,column:16},end:{line:15,column:45}},"3":{start:{line:16,column:2},end:{line:16,column:34}},"4":{start:{line:31,column:2},end:{line:35,column:3}},"5":{start:{line:32,column:4},end:{line:32,column:18}},"6":{start:{line:34,column:4},end:{line:34,column:38}},"7":{start:{line:37,column:16},end:{line:37,column:43}},"8":{start:{line:38,column:2},end:{line:38,column:24}},"9":{start:{line:50,column:17},end:{line:50,column:19}},"10":{start:{line:51,column:2},end:{line:75,column:3}},"11":{start:{line:52,column:18},end:{line:52,column:26}},"12":{start:{line:53,column:19},end:{line:53,column:38}},"13":{start:{line:56,column:4},end:{line:74,column:5}},"14":{start:{line:57,column:6},end:{line:57,column:27}},"15":{start:{line:58,column:11},end:{line:74,column:5}},"16":{start:{line:60,column:6},end:{line:65,column:7}},"17":{start:{line:61,column:8},end:{line:61,column:47}},"18":{start:{line:64,column:8},end:{line:64,column:30}},"19":{start:{line:67,column:6},end:{line:73,column:7}},"20":{start:{line:68,column:8},end:{line:68,column:44}},"21":{start:{line:69,column:13},end:{line:73,column:7}},"22":{start:{line:70,column:8},end:{line:70,column:43}},"23":{start:{line:72,column:8},end:{line:72,column:30}},"24":{start:{line:76,column:2},end:{line:76,column:15}},"25":{start:{line:79,column:0},end:{line:79,column:50}},"26":{start:{line:80,column:0},end:{line:80,column:50}},"27":{start:{line:81,column:0},end:{line:81,column:40}}},fnMap:{"0":{name:"castFileResponse",decl:{start:{line:14,column:9},end:{line:14,column:25}},loc:{start:{line:14,column:32},end:{line:17,column:1}},line:14},"1":{name:"castJsonResponse",decl:{start:{line:29,column:9},end:{line:29,column:25}},loc:{start:{line:29,column:32},end:{line:39,column:1}},line:29},"2":{name:"castRequest",decl:{start:{line:49,column:9},end:{line:49,column:20}},loc:{start:{line:49,column:27},end:{line:77,column:1}},line:49}},branchMap:{"0":{loc:{start:{line:31,column:2},end:{line:35,column:3}},type:"if",locations:[{start:{line:31,column:2},end:{line:35,column:3}},{start:{line:31,column:2},end:{line:35,column:3}}],line:31},"1":{loc:{start:{line:31,column:6},end:{line:31,column:39}},type:"binary-expr",locations:[{start:{line:31,column:6},end:{line:31,column:18}},{start:{line:31,column:22},end:{line:31,column:39}}],line:31},"2":{loc:{start:{line:56,column:4},end:{line:74,column:5}},type:"if",locations:[{start:{line:56,column:4},end:{line:74,column:5}},{start:{line:56,column:4},end:{line:74,column:5}}],line:56},"3":{loc:{start:{line:56,column:8},end:{line:56,column:45}},type:"binary-expr",locations:[{start:{line:56,column:8},end:{line:56,column:22}},{start:{line:56,column:26},end:{line:56,column:45}}],line:56},"4":{loc:{start:{line:58,column:11},end:{line:74,column:5}},type:"if",locations:[{start:{line:58,column:11},end:{line:74,column:5}},{start:{line:58,column:11},end:{line:74,column:5}}],line:58},"5":{loc:{start:{line:58,column:15},end:{line:58,column:55}},type:"binary-expr",locations:[{start:{line:58,column:15},end:{line:58,column:35}},{start:{line:58,column:39},end:{line:58,column:55}}],line:58},"6":{loc:{start:{line:60,column:6},end:{line:65,column:7}},type:"if",locations:[{start:{line:60,column:6},end:{line:65,column:7}},{start:{line:60,column:6},end:{line:65,column:7}}],line:60},"7":{loc:{start:{line:67,column:6},end:{line:73,column:7}},type:"if",locations:[{start:{line:67,column:6},end:{line:73,column:7}},{start:{line:67,column:6},end:{line:73,column:7}}],line:67},"8":{loc:{start:{line:69,column:13},end:{line:73,column:7}},type:"if",locations:[{start:{line:69,column:13},end:{line:73,column:7}},{start:{line:69,column:13},end:{line:73,column:7}}],line:69},"9":{loc:{start:{line:69,column:17},end:{line:69,column:67}},type:"binary-expr",locations:[{start:{line:69,column:17},end:{line:69,column:42}},{start:{line:69,column:46},end:{line:69,column:67}}],line:69}},s:{"0":0,"1":0,"2":0,"3":0,"4":0,"5":0,"6":0,"7":0,"8":0,"9":0,"10":0,"11":0,"12":0,"13":0,"14":0,"15":0,"16":0,"17":0,"18":0,"19":0,"20":0,"21":0,"22":0,"23":0,"24":0,"25":0,"26":0,"27":0},f:{"0":0,"1":0,"2":0},b:{"0":[0,0],"1":[0,0],"2":[0,0],"3":[0,0],"4":[0,0],"5":[0,0],"6":[0,0],"7":[0,0],"8":[0,0],"9":[0,0]},_coverageSchema:"43e27e138ebf9cfc5966b082cf9a028302ed4184",hash:"3d1b3251d5ca37c203961c34de513bbc45d20b6e"};var coverage=global[gcv]||(global[gcv]={});if(coverage[path]&&coverage[path].hash===hash){return coverage[path];}return coverage[path]=coverageData;}();const utils=(cov_1h8owsa8m6.s[0]++,require('./utils'));const Schema=(cov_1h8owsa8m6.s[1]++,require('./schemas').Schema);/**
 * Turns a plain javascript object into Recurly domain objects.
 * This involves camelizing the snake-cased keys and converting the
 * untyped objects into typed objects. It also casts special types
 * like datetimes.
 *
 * @private
 * @param {Object} obj - The plain js object to cast to Recurly object
 * @return {Resource}
 */function castFileResponse(obj){cov_1h8owsa8m6.f[0]++;const Klass=(cov_1h8owsa8m6.s[2]++,Schema.locateResource('File'));cov_1h8owsa8m6.s[3]++;return Klass.cast({data:obj});}/**
 * Turns a plain javascript object into Recurly domain objects.
 * This involves camelizing the snake-cased keys and converting the
 * untyped objects into typed objects. It also casts special types
 * like datetimes.
 *
 * @private
 * @param {Object} obj - The plain js object to cast to Recurly object
 * @return {Resource}
 */function castJsonResponse(obj){cov_1h8owsa8m6.f[1]++;let name;cov_1h8owsa8m6.s[4]++;if((cov_1h8owsa8m6.b[1][0]++,obj===null)||(cov_1h8owsa8m6.b[1][1]++,obj===undefined)){cov_1h8owsa8m6.b[0][0]++;cov_1h8owsa8m6.s[5]++;name='Empty';}else{cov_1h8owsa8m6.b[0][1]++;cov_1h8owsa8m6.s[6]++;name=utils.className(obj.object);}const Klass=(cov_1h8owsa8m6.s[7]++,Schema.locateResource(name));cov_1h8owsa8m6.s[8]++;return Klass.cast(obj);}/**
 * Turns a plain javascript object into Recurly request.
 * This involves snakeifying the camel-cased keys.
 *
 * @private
 * @param {Object} obj - The plain js object to cast to Recurly request
 * @return {Object}
 */function castRequest(obj){cov_1h8owsa8m6.f[2]++;const newObj=(cov_1h8owsa8m6.s[9]++,{});cov_1h8owsa8m6.s[10]++;for(let key in obj){const value=(cov_1h8owsa8m6.s[11]++,obj[key]);const newKey=(cov_1h8owsa8m6.s[12]++,utils.snakeify(key));// the order of these conditionals are important
cov_1h8owsa8m6.s[13]++;if((cov_1h8owsa8m6.b[3][0]++,value===null)||(cov_1h8owsa8m6.b[3][1]++,value===undefined)){cov_1h8owsa8m6.b[2][0]++;cov_1h8owsa8m6.s[14]++;newObj[newKey]=null;}else{cov_1h8owsa8m6.b[2][1]++;cov_1h8owsa8m6.s[15]++;if((cov_1h8owsa8m6.b[5][0]++,Array.isArray(value))&&(cov_1h8owsa8m6.b[5][1]++,value.length>0)){cov_1h8owsa8m6.b[4][0]++;cov_1h8owsa8m6.s[16]++;// If they are not primitives, recursively cast
if(typeof value[0]==='object'){cov_1h8owsa8m6.b[6][0]++;cov_1h8owsa8m6.s[17]++;newObj[newKey]=value.map(castRequest);// else pass along the unaltered array of primitives
}else{cov_1h8owsa8m6.b[6][1]++;cov_1h8owsa8m6.s[18]++;newObj[newKey]=value;}}else{cov_1h8owsa8m6.b[4][1]++;cov_1h8owsa8m6.s[19]++;if(value instanceof Date){cov_1h8owsa8m6.b[7][0]++;cov_1h8owsa8m6.s[20]++;newObj[newKey]=value.toISOString();}else{cov_1h8owsa8m6.b[7][1]++;cov_1h8owsa8m6.s[21]++;if((cov_1h8owsa8m6.b[9][0]++,typeof value==='object')&&(cov_1h8owsa8m6.b[9][1]++,!Array.isArray(value))){cov_1h8owsa8m6.b[8][0]++;cov_1h8owsa8m6.s[22]++;newObj[newKey]=castRequest(value);}else{cov_1h8owsa8m6.b[8][1]++;cov_1h8owsa8m6.s[23]++;newObj[newKey]=value;}}}}}cov_1h8owsa8m6.s[24]++;return newObj;}cov_1h8owsa8m6.s[25]++;module.exports.castFileResponse=castFileResponse;cov_1h8owsa8m6.s[26]++;module.exports.castJsonResponse=castJsonResponse;cov_1h8owsa8m6.s[27]++;module.exports.castRequest=castRequest;